# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~MSle0~/segmentRef

# Last Substitute Search Pattern:
~MSle0&M

# Last Substitute String:
$Skeleton

# Command Line History (newest to oldest):
:e!
:e
:w
:q
:q!
:s
:wq
:YcmGenerateConfig

# Search String History (newest to oldest):
?/segmentRef
?/handle_meshRefi
?/handle_draw
?/m_skeletonNode
?/segmentConne
?/drawSkeleton
?/draw
?/drawing
?/segmentSele
?/showSeg
?/setup
?/showSegme
?/showSe
?/segmentSe
? \<computeSegments\>
?/m_showContra
?/handle_segmentSele
?/getMeshS
?/getMeshs
?/getMesh
?/getMeshSeg
?/populateVertices
?/handle_segmentCon
?/handle_connec
?/handle_
?/setUniforms
?/handle_drawing
?/PointSphere
? \<drawSkeleton\>
?/Draw
?/skeletonNodes
?/drawSkeletonNodes
? \<selectedSegmentIndex\>
?/handle_segmen
?/initialize
?/temp
?/handle_segment
?/handle_mouse
?/Skeleton
?/Point
?/selectedSegme
?/selectedSegment

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
"0	LINE	0
	    PointSphere tempPS = m_PS;
	    auto p(m_M.point(CGALSurfaceMesh::vertex_index(vIndex)));
	    tempPS.setPosition(p);
	    tempPS.setColor(glm::vec3(1, 0, 0));
	    tempPS.doubleSize();
	    m_skeletonNodes.push_back(tempPS);
"1	LINE	0
	
"2	LINE	0
	    //compute Skeleton
	    std::unordered_set<size_t>
		skeletonNodesInMeshIndices; // holds the vertex indices of the skeleton nodes
	    for (auto skeletonEdge : skeletonEdgesInMeshIndices) {
		for (auto v : skeletonEdge) {
		    skeletonNodesInMeshIndices.insert(v);
		}
	    }
	    std::vector<CGALSurfaceMesh::Point> skeletonNodePositions;
	    std::map<size_t, size_t> meshIndices_to_skeletonIndices;
	    size_t indexInSkeleton = 0;
	    for (auto indexInMesh : skeletonNodesInMeshIndices) {
		skeletonNodePositions.push_back(m_M.point(CGALSurfaceMesh::vertex_index(indexInMesh)));
		meshIndices_to_skeletonIndices.insert(std::make_pair(indexInMesh, indexInSkeleton));
		indexInSkeleton++;
	    }
	
	    //skeletonEdges with mesh indices -> skeletonEdges with skeleton indices
	    std::unordered_set<std::pair<size_t, size_t> > skeletonEdgesInSkeletonIndices;
	    for (auto edge : skeletonEdgesInMeshIndices) {
		skeletonEdgesInSkeletonIndices.insert(std::make_pair(meshIndices_to_skeletonIndices[edge[0]], meshIndices_to_skeletonIndices[edge[1]]));
	    }
	
	    skeleton = Skeleton(skeletonNodePositions, skeletonEdgesSet, m_PS, m_modelMatrix);
"3	LINE	0
	    std::cout << "Connectivity surgery finished. Number of skeleton nodes:"
		      << m_skeletonNodes.size() << std::endl;
"4	LINE	0
	void Mesh::drawSkeleton(Shader* shader)
	{
	    for (PointSphere ps : m_skeletonNodes) {
		ps.handle_drawing(shader, m_modelMatrix);
	    }
	}
"5	LINE	0
	    m_skeletonNodes.clear();
"6	LINE	0
	    std::cout << "Connectivity surgery finished. Number of skeleton nodes:"
		      << m_skeletonNodes.size() << std::endl;
"7	LINE	0
		indexInSkeleton_to_indexInMesh.push_back(indexInMesh);
"8	LINE	0
	    
"9	LINE	0
	    std::unordered_set<std::pair<size_t, size_t> > skeletonEdgesSet;
"a	CHAR	0
	i{€kr€kb€kr€kr}}
""-	CHAR	0
	:

# File marks:
'0  1  0  ~/Desktop/livadaki/Thesis/mesh.cpp
'1  1  25  ~/Desktop/livadaki/Thesis/mesh.cpp
'2  634  108  ~/Desktop/livadaki/Thesis/mesh.cpp
'3  1  37  ~/Desktop/livadaki/Thesis/mesh.cpp
'4  8  0  ~/Desktop/Thesis/connectivitysurgeon.cpp
'5  33  25  ~/Desktop/Thesis/connectivitysurgeon.h
'6  1  0  ~/Desktop/Thesis/build/connectivitysurgeon.h
'7  1  0  ~/Desktop/Thesis/OpenGL_WithoutWrappers.pro
'8  1  0  ~/Desktop/Thesis/build/Makefile
'9  4  8  ~/Desktop/Accelerated C++/Chapter 0/ex02.cpp

# Jumplist (newest first):
-'  1  0  ~/Desktop/livadaki/Thesis/mesh.cpp
-'  3  0  ~/Desktop/livadaki/Thesis/mesh.cpp

# History of marks within files (newest to oldest):

> ~/Desktop/livadaki/Thesis/mesh.cpp
	"	1	0
	.	370	0
	+	1	4
	+	1	4
	+	1	0
	+	1	0
	+	1	32
	+	1	0
	+	1	32
	+	1	25
	+	1	31
	+	1	14
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	5
	+	1	4
	+	1	4
	+	1	32
	+	1	0
	+	1	27
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	4
	+	1	59
	+	1	85
	+	1	0
	+	1	34
	+	1	62
	+	1	19
	+	1	80
	+	1	34
	+	1	52
	+	1	45
	+	1	0
	+	1	54
	+	1	42
	+	1	24
	+	1	83
	+	1	54
	+	1	22
	+	1	76
	+	1	31
	+	1	0
	+	1	30
	+	1	0
	+	1	4
	+	1	0
	+	1	0
	+	1	0
	+	1	40
	+	1	38
	+	1	0
	+	1	65
	+	1	28
	+	1	0
	+	1	83
	+	1	0
	+	1	120
	+	1	0
	+	1	34
	+	1	26
	+	1	54
	+	1	80
	+	1	30
	+	1	18
	+	1	46
	+	1	0
	+	1	0
	+	1	0
	+	1	16
	+	1	13
	+	1	46
	+	1	14
	+	1	0
	+	1	13
	+	1	0
	+	1	30
	+	1	134
	+	1	0
	+	1	0
	+	1	2
	+	1	43
	+	1	83
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	1
	+	1	0
	+	1	41
	+	1	34
	+	1	0
	+	1	75
	+	1	0
	+	370	0
	m	542	0
